// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Message struct {
	ID        string    `json:"id"`
	User      *User     `json:"user"`
	Content   string    `json:"content"`
	Timestamp time.Time `json:"timestamp"`
}

type NewMessage struct {
	Content string `json:"content"`
}

type NewUser struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Role string

const (
	RoleAdmin    Role = "ADMIN"
	RoleUser     Role = "USER"
	RoleEveryone Role = "EVERYONE"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
	RoleEveryone,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser, RoleEveryone:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
